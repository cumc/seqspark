#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;


my $prefix = $ENV{HOME} . "/seqspark";
my $help = 0;
my $db_dir = '';

if (scalar @ARGV == 0) {&help;}

GetOptions(
	'prefix=s' => \$prefix,
	'db-dir=s' => \$db_dir,
	'h|help!' => \$help
);
#check db_dir
my $user = $ENV{USER};
if ($db_dir eq "") {
	die "$db_dir not provided, use /user/$user/seqspark as default\n";
	$db_dir = "seqspark";
}
unless ($db_dir =~ m#^/#) {
	$db_dir = "/user/". $ENV{USER} . "/$db_dir";
}

sub build {
	print STDERR "Building seqspark ...\n";
	!system("sbt -sbt-version 0.13.16 assembly 2>&1 > build.log") or die "Failed to build jar: $!\n";
	print STDERR "Finished building seqspark.\n";
}

sub install {
	open my $fh, "build.sbt" or die "Failed to open build.sbt: $!\n";
	my $jar;	
	my $scalaVersion = "2.11";
	while (<$fh>) {
		chomp;
		if (m/(SeqSpark.*\.jar)/) {
			$jar = $1;
			last;
		}
		if (m/scalaVersion.+?(2\.1[01])\./) {
			$scalaVersion = $1;
		}
	}
	my $target = "target/scala-$scalaVersion/$jar";
	if (! $jar) {
		die "Cannot get the jar file name from build.sbt";
	} elsif (! -f $target) {
		die "Cannot find $target, compiling failed?";
	}
	my $scripts = "bin";
	my $conf = "conf";
	!system("mkdir -p $prefix") or die "Failed to create folder: $prefix\n";
	!system("mkdir -p $prefix/conf") or die "Failed to create folder: $prefix/conf\n";
	!system("cp", $target, $prefix) or die "Failed to copy jar file to $prefix\n";
	!system("cp", "-r", $scripts, $prefix) or die "Failed to copy scripts to $prefix\n";
	##prepare conf
	open my $i_conf, "conf/reference.conf" or die "Failed to open conf/reference.conf: $!\n";
	open my $o_conf, ">$prefix/conf/reference.conf" or die "Failed to open $prefix/conf/reference.conf for write: $!\n";
	while (<$i_conf>) {
		if (m/dbDir_unset/) {
			print $o_conf "dbDir = $db_dir\n";
		} else {
			print $o_conf $_;
		}
	}
	close $i_conf;
	close $o_conf;
	&download_dbs;
}

sub download_dbs {
	
	!system("hdfs", "dfs", "-mkdir", "-p", "$db_dir") 
		or die "Cannot create dir $db_dir on HDFS, you need to mannually download databases later\n";
	my @db = qw/refFlat_table refGene_seq dbSNP-138.vcf.bz2/;
	if ($db_dir) {
		print STDERR "going to download refseq and dbsnp to $db_dir\n";
		for my $db (@db) {
			my $test = system("hdfs dfs -test -f $db_dir/$db");
			if (!$test) {
				print STDERR "database $db already exists, skip downloading\n";
				next;
			}
			!system("curl http://seqspark.statgen.us/$db | hdfs dfs -appendToFile - $db_dir/$db") 
				or die "Failed to download\n";
		}
		
	} else {
		die "You didn't specify a valid HDFS path\n";
	}
}

sub help {
		print "Usage: ./install [options]
Options:
	--help,-h            Show this help message
	--prefix=[dir]       Set install directory. [~/seqspark]
	--db-dir=[dir]       HDFS path to store the database files. [/user//seqspark]\n";
	exit;
}

sub main {
	print STDERR "Going to install seqspark with the following options:
	--prefix         $prefix
	--db-dir         $db_dir\n";	
	
	&build;
	&install;
}

&main;

