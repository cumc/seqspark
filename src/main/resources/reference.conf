seqspark {
  project = seqspark
  localDir = ${PWD}
  dbDir = ref/seqspark_db
  jobs = 1024
  partitions = 1024
  pipeline = [ ] #qualityControl, association, meta
  cache = true
  benchmark = false
  debug = false

  input {
    genotype {
      format = vcf
      path = "" #${seqspark.project}.vcf
      //genomeBuild = hg19
      filters = [] #["FILTER==PASS and INFO.AN!=0  #and (INFO.AC>=10 and INFO.AC<=3800)"]
      samples = all
      variants = all
      decompose = true
      missing = "bestGuess" #random, no, dosage
      impute = "bestGuess"
    }
    phenotype {
      path = "" #${seqspark.project}.ped
      batch = none
      samples = all
    }
  }

  output {
    genotype {
      path = ""
      export = false
      format = "vcf"
      filters = []
      samples = all
      variants = all
      missing = "bestGuess"
      impute = "bestGuess"
    }
  }

  qualityControl {
    genotypes = [] #["DP >= 8 and DP < 250 and GQ >= 20"]

    variants  = [
      #"CADD.score > 3",
      #"alleleNum == 2 and missingRate < 0.1",
      #"batchMissingRate < 0.1 and batchSpecific < 2 and hwePvalue >= 1e-6"
      ]
    summaries = [] #gdgq, pca, titv, sexCheck

    count {
      by : []#["samples", "samples.batch and variants.QC", "variants.QC and variants.passed"]
    }
    titv {
      by : [] #["samples", ""]
    }

    group {
      samples {
        #batch {
        #  case = ["control==0"]
        #  control = ["control==1"]
        #}
      }
      variants {
        #titv {
        #  ti = ["isTi"]
        #  tv = ["isTv"]
        #}
        QC {
          passed = ["SS_PASS==true"]
          failed = ["SS_PASS==false"]
        }
        passed {
          rare = ["maf < 0.01 OR maf > 0.99", "SS_PASS==true"]
          common = ["maf >= 0.01", "maf <= 0.99", "SS_PASS==true"]
        }
      }
    }

    pca {
      variants = ["hwePvalue >= 1e-4",
                  "missingRate < 0.1",
                  "batchMissingRate < 0.1",
                  "chr != \"X\"",
                  "chr != \"Y\"",
                  "maf >= 0.01 and maf <= 0.99"]
      impute = "fixed"
      normalize = true
      noprune = false
      prune {
        window = 50
        step = 5
        r2 = 0.5
      }
    }

    gdgq {
      fraction = 1.0
    }
    save = false
    export = false
  }

  annotation {

    variants {
      dbs = []#[dbNSFP, CADD, ExAC]
      addInfo {
        #dbSNP = "dbSNP"
        #ExAC_AF = "ExAC.AC/ExAC.AN"
        #weight1 = "dbNSFP.score"
        #CADD_Score = "CADD.score"
        #SS_ANNO = "RefSeq"
      }
    }

    genes {
      db = RefSeq
      addInfo {
        gene = "RefSeq.geneName"
        isFunctional = ["splicing", "nonsysnonymous", "misense", "frameshift"]
      }
    }

  }

  meta {
    study = {
      conditional = []
      list = []
      study1 {
        path = ""
      }
    }
    method = ${seqspark.association.method}
    #method.list = [brv, skat, skato]

  }

  association {
    trait {
      list = [] #[control]
      control {
        binary = true
        covariates = [] #age, sex, etc.
        conditional = [] #"geneName", "1:10000[A|T]"
        pc = 2
      }
    }
    #methods = ["single", "cmc", "brv", "VT", "rv-TDT", "SKAT"]
    method {
      list = [] #["snv", "cmc", "brv", "vt"]
      sites = "actual"
      resampling = false
      test = score #could be score, or wald


      misc {
        impute = "bestGuess" //meanDosage, random
        varLimit = [2, 2000, 3]
        groupBy = ["gene"]
        variants = ["isFunctional"]
      }

      skato {
        type = skato
        weight = skat
        maf {
          fixed = true
          source = pooled
          cutoff = 0.01
        }
        misc {
          impute = "bestGuess" //meanDosage, random
          varLimit = [2, 2000, 3]
          groupBy = ["gene"]
          variants = ["isFunctional"]
          method = "optimal.adj"
          rhos = []
          kernel = "linear.weighted"
          weightBeta = [1, 25]
          smallSampleAdjustment = true
        }
      }
      skat {
        type = skat
        weight = skat
        maf {
          fixed = true
          source = pooled
          cutoff = 0.01
        }
        misc {
          impute = "bestGuess" //meanDosage, random
          varLimit = [2, 2000, 3]
          groupBy = ["gene"]
          variants = ["isFunctional"]
          method = "davies"
          rho = 0.0
          kernel = "linear.weighted"
          weightBeta = [1, 25]
          smallSampleAdjustment = true
        }
      }
      sum {
        type = sum
        weight = none
        maf {
          fixed = true
          source = pooled
          cutoff = 0.01
        }
        misc {
          impute = "bestGuess" //meanDosage, random
          varLimit = [1, 2000, 1]
          groupBy = []
          variants = []
        }
      }
      snv {
        type = snv
        weight = none
        maf {
          fixed = true
          source = pooled
          cutoff = 0.01
        }
        misc {
          impute = "bestGuess" //meanDosage, random
          varLimit = []
          groupBy = []
          variants = []
        }
      }
      cmc {
        type = cmc
        weight = none
        maf {
          source = pooled  #could be 'controls', 'annotation' if it is annotation. seqspark will read seqspark_ANNO_AF
          cutoff = 0.01
          fixed = true
        }
        misc = ${seqspark.association.method.misc}
      }
      cadd {
        type = brv
        weight = none
        maf {
          source = pooled
          cutoff = 0.01
          fixed = true
        }
        misc {
          groupBy = [slidingWindow, 4000, 0]
          variants = ["CADD.score >= 3"]
        }
      }
      brv {
        type = brv
        weight = equal #could be wss (),
        maf {
          source = pooled #could be 'controls', 'annotation' if it is annotation. seqspark will read seqspark_ANNO_AF
          cutoff = 0.01
          fixed = true
        }
        misc = ${seqspark.association.method.misc}
      }
      wss {
        type = brv
        weight = wss
        maf {
          source = pooled
          cutoff = 0.01
          fixed = true
        }
        misc = ${seqspark.association.method.misc}
      }
      vt {
        type = brv
        weight = equal
        resampling = true
        maf {
          source = pooled #could be 'controls', 'annotation' if it is annotation. seqspark will read seqspark_ANNO_AF
          cutoff = 0.05
          fixed = false
        }
        misc = ${seqspark.association.method.misc}
      }
    }
  }
}
